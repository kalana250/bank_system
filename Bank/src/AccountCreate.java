
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mcs
 */
public class AccountCreate extends javax.swing.JFrame implements Runnable{
        String idNew;
        
        
    /**
     * Creates new form AccountCreate
     */
    public AccountCreate() {
        
        Thread t = new Thread(this);
        t.start();
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ACCOUNT CREATION SECTOR");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("FINWEALTH BANK");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("FULL NAME");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("ADDRESS");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("CONTACT NO");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("E-MAIL");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("NIC");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("BRANCH");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("ACCOUNT NO.");

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("CARD NO.");

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("CVV");

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("PIN");

        jTextField1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField7.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField8.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextField9.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton2.setText("CREATE  ACCOUNT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton3.setText("BACK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Java Bank 10(C). All Rights Reserved!, Since 2024. (Copyrights) ");

        jPasswordField1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jPasswordField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPasswordField1.setEchoChar('\u2022');

        jComboBox1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Colombo1", "Colombo2", "Colombo3", "Colombo4", "Colombo5", "Colombo6", "Colombo7", "Colombo8", "Colombo9", " ", " " }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(76, 76, 76)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextField9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                                            .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jPasswordField1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jButton2)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jComboBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jTextField7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(52, 52, 52)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addGap(8, 8, 8))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Dashboard d = new Dashboard();
            d.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            
            String fn = jTextField1.getText();
            String ad = jTextField2.getText();
            String cn = jTextField3.getText();
            String em = jTextField4.getText();
            String nic = jTextField5.getText();
            String acn = jTextField7.getText();
            String cdn = jTextField8.getText();
            String cvv = jTextField9.getText();
            String branch = jComboBox1.getSelectedItem().toString();
            String pin = jPasswordField1.getText();
            
           DBF.iud("INSERT INTO acc_details (`fullname`,`address`,`contact_no`,`email`,`nic`,`branch`,`acc_no`,`card_no`,`cvv`,`pin`,`balance`) "
           + "VALUES ('"+fn+"','"+ad+"','"+cn+"','"+em+"','"+nic+"','"+branch+"','"+acn+"','"+cdn+"','"+cvv+"','"+pin+"','"+"0.00"+"')"); 
           
           DBC.iud("INSERT INTO user (`fullname`,`address`,`nic`,`bank`,`acc-no`,`card-no`,`cvv`,`pin`,`balance`) "
           + "VALUES ('"+fn+"','"+ad+"','"+nic+"','"+"Finwealth Bank"+"','"+acn+"','"+cdn+"','"+cvv+"','"+pin+"','"+"0.00"+"')"); 
           
           ResultSet rs = DBV.search("SELECT `if` FROM user ORDER BY `acc_no` DESC");
           rs.next();
           String id = rs.getString("if");
           int a = Integer.parseInt(id);
           int b = 1;
           int c = a + b;
           String idNew = String.valueOf(c);
           String bank = "Finwealth Bank";
           DBV.iud("UPDATE user SET `nic` = '"+nic+"' WHERE `if` = '"+idNew+"' ");
           DBV.iud("UPDATE user SET `bank` = '"+bank+"' WHERE `if` = '"+idNew+"' ");
           DBV.iud("UPDATE user SET `acc_no` = '"+acn+"' WHERE `if` = '"+idNew+"' ");
           
           //DBV.iud("INSERT INTO user (`nic`,`bank`,`acc_no`,`cvv`) "
           //+ "VALUES ('"+nic+"','"+"Finwealth Bank"+"','"+acn+"','"+cvv+"')"); 
           
           JOptionPane.showMessageDialog(this, "Account Created Successfully!", "DONE!", JOptionPane.INFORMATION_MESSAGE);
           
           jTextField1.setText(null);
           jTextField2.setText(null);
           jTextField3.setText(null);
           jTextField4.setText(null);
           jTextField5.setText(null);
           jTextField7.setText(null);
           jTextField8.setText(null);
           jTextField9.setText(null);
           jPasswordField1.setText(null);
           jComboBox1.setSelectedItem("Colombo1");
        
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        try {
        String branch = jComboBox1.getSelectedItem().toString();
        String bank_code = "44";
        String acc_code = "100000";
        
        if(branch.equals("Colombo1")){
            
           String branch_code = "01";
            String acc_no = bank_code + branch_code + acc_code;
            ResultSet rs = DBF.search("SELECT `acc_no` FROM acc_details ORDER BY `id` DESC");
            if(rs.next()){
                String accno = rs.getString("acc_no");
                long accno1 = Long.parseLong(accno);
                long accno2 = 1;
                long accNo = accno1+accno2;
                jTextField7.setText(String.valueOf(accNo));
            }else{
                jTextField7.setText(String.valueOf(acc_no)); 
            }

            ResultSet rs1 = DBF.search("SELECT `pin` FROM acc_details ORDER BY `id` DESC");
            if(rs1.next()){

                String pin = rs1.getString("pin");
                int pin1 = Integer.parseInt(pin);
                int pin2 = 1;
                int pinNew = pin1 + pin2;
                String formattedPin;
            if (pinNew < 10000) {
                formattedPin = "0001";
            } else if (pinNew >= 100) {
                formattedPin = "0" + pinNew;
            } else if (pinNew >= 10) {
                formattedPin = "00" + pinNew;
            } else {
                formattedPin = "000" + pinNew;
            }
                jPasswordField1.setText(formattedPin);
            }else if(jPasswordField1.getText().equals("10000")){
                        jPasswordField1.setText("0001");
            }else{
                jPasswordField1.setText("0001");
            }
            ResultSet rs2 = DBF.search("SELECT `id` FROM acc_details ORDER BY `id` DESC");
            if(rs2.next()){
                String id1 = rs2.getString("id");
                int id2 = Integer.parseInt(id1);
                int id3 = 2;
                int iD = id2+id3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }else{
                int iD = 3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }
            ResultSet rs3 = DBV.search("SELECT `card_no` , `cvv` FROM user WHERE `if` = '"+idNew+"' ");
            rs3.next();
            String cn = rs3.getString("card_no");
            String cv = rs3.getString("cvv");
            jTextField8.setText(cn);
            jTextField9.setText(cv);
            
        }else if(branch.equals("Colombo2")){
            String branch_code = "02";
            String acc_no = bank_code+branch_code+acc_code;
            ResultSet rs = DBF.search("SELECT `acc_no` FROM acc_details ORDER BY `id` DESC");
            if(rs.next()){
                String accno = rs.getString("acc_no");
                long accno1 = Long.parseLong(accno);
                long accno2 = 1;
                long accNo = accno1+accno2;
                jTextField7.setText(String.valueOf(accNo));
            }else{
                jTextField7.setText(String.valueOf(acc_no)); 
            }
            ResultSet rs1 = DBF.search("SELECT `pin` FROM acc_details ORDER BY `id` DESC");
            if(rs1.next()){
                String pin = rs1.getString("pin");
                int pin1 = Integer.parseInt(pin);
                int pin2 = 1;
                int pinNew = pin1+pin2;
                String formattedPin;
            if (pinNew < 10000) {
                formattedPin = "0001";
            } else if (pinNew >= 100) {
                formattedPin = "0" + pinNew;
            } else if (pinNew >= 10) {
                formattedPin = "00" + pinNew;
            } else {
                formattedPin = "000" + pinNew;
            }
                jPasswordField1.setText(formattedPin);
            }else if(jPasswordField1.getText().equals("10000")){
                        jPasswordField1.setText("0001");
            }else{
                jPasswordField1.setText("0001");
            }
            ResultSet rs2 = DBF.search("SELECT `id` FROM acc_details ORDER BY `id` DESC");
            if(rs2.next()){
                String id1 = rs2.getString("id");
                int id2 = Integer.parseInt(id1);
                int id3 = 2;
                int iD = id2+id3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }else{
                int iD = 3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }
            ResultSet rs3 = DBV.search("SELECT `card_no` , `cvv` FROM user WHERE `if` = '"+idNew+"' ");
            rs3.next();
            String cn = rs3.getString("card_no");
            String cv = rs3.getString("cvv");
            jTextField8.setText(cn);
            jTextField9.setText(cv);
        }else if(branch.equals("Colombo3")){
            String branch_code = "03";
            String acc_no = bank_code+branch_code+acc_code;
            ResultSet rs = DBF.search("SELECT `acc_no` FROM acc_details ORDER BY `id` DESC");
            if(rs.next()){
                String accno = rs.getString("acc_no");
                long accno1 = Long.parseLong(accno);
                long accno2 = 1;
                long accNo = accno1+accno2;
                jTextField7.setText(String.valueOf(accNo));
            }else{
                jTextField7.setText(String.valueOf(acc_no)); 
            }
            ResultSet rs1 = DBF.search("SELECT `pin` FROM acc_details ORDER BY `id` DESC");
            if(rs1.next()){
                String pin = rs1.getString("pin");
                int pin1 = Integer.parseInt(pin);
                int pin2 = 1;
                int pinNew = pin1+pin2;
                String formattedPin;
            if (pinNew > 10000) {
                formattedPin = "0001";
            } else if (pinNew >= 100) {
                formattedPin = "0" + pinNew;
            } else if (pinNew >= 10) {
                formattedPin = "00" + pinNew;
            } else {
                formattedPin = "000" + pinNew;
            }
                jPasswordField1.setText(formattedPin);
            }else if(jPasswordField1.getText().equals("10000")){
                        jPasswordField1.setText("0001");
            }else{
                jPasswordField1.setText("0001");
            }
            ResultSet rs2 = DBF.search("SELECT `id` FROM acc_details ORDER BY `id` DESC");
            if(rs2.next()){
                String id1 = rs2.getString("id");
                int id2 = Integer.parseInt(id1);
                int id3 = 2;
                int iD = id2+id3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }else{
                int iD = 3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }
            ResultSet rs3 = DBV.search("SELECT `card_no` , `cvv` FROM user WHERE `if` = '"+idNew+"' ");
            rs3.next();
            String cn = rs3.getString("card_no");
            String cv = rs3.getString("cvv");
            jTextField8.setText(cn);
            jTextField9.setText(cv);
        }else if(branch.equals("Colombo4")){
            String branch_code = "04";
            String acc_no = bank_code+branch_code+acc_code;
            ResultSet rs = DBF.search("SELECT `acc_no` FROM acc_details ORDER BY `id` DESC");
            if(rs.next()){
                String accno = rs.getString("acc_no");
                long accno1 = Long.parseLong(accno);
                long accno2 = 1;
                long accNo = accno1+accno2;
                jTextField7.setText(String.valueOf(accNo));
            }else{
                jTextField7.setText(String.valueOf(acc_no)); 
            }
            ResultSet rs1 = DBF.search("SELECT `pin` FROM acc_details ORDER BY `id` DESC");
            if(rs1.next()){
                String pin = rs1.getString("pin");
                int pin1 = Integer.parseInt(pin);
                int pin2 = 1;
                int pinNew = pin1+pin2;
                String formattedPin;
            if (pinNew < 10000) {
                formattedPin = "0001";
            } else if (pinNew >= 100) {
                formattedPin = "0" + pinNew;
            } else if (pinNew >= 10) {
                formattedPin = "00" + pinNew;
            } else {
                formattedPin = "000" + pinNew;
            }
                jPasswordField1.setText(formattedPin);
            }else if(jPasswordField1.getText().equals("10000")){
                        jPasswordField1.setText("0001");
            }else{
                jPasswordField1.setText("0001");
            }
            ResultSet rs2 = DBF.search("SELECT `id` FROM acc_details ORDER BY `id` DESC");
            if(rs2.next()){
                String id1 = rs2.getString("id");
                int id2 = Integer.parseInt(id1);
                int id3 = 2;
                int iD = id2+id3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }else{
                int iD = 3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }
            ResultSet rs3 = DBV.search("SELECT `card_no` , `cvv` FROM user WHERE `if` = '"+idNew+"' ");
            rs3.next();
            String cn = rs3.getString("card_no");
            String cv = rs3.getString("cvv");
            jTextField8.setText(cn);
            jTextField9.setText(cv);
        }else if(branch.equals("Colombo5")){
            String branch_code = "05";
            String acc_no = bank_code+branch_code+acc_code;
            ResultSet rs = DBF.search("SELECT `acc_no` FROM acc_details ORDER BY `id` DESC");
            if(rs.next()){
                String accno = rs.getString("acc_no");
                long accno1 = Long.parseLong(accno);
                long accno2 = 1;
                long accNo = accno1+accno2;
                jTextField7.setText(String.valueOf(accNo));
            }else{
                jTextField7.setText(String.valueOf(acc_no)); 
            }
            ResultSet rs1 = DBF.search("SELECT `pin` FROM acc_details ORDER BY `id` DESC");
            if(rs1.next()){
                String pin = rs1.getString("pin");
                int pin1 = Integer.parseInt(pin);
                int pin2 = 1;
                int pinNew = pin1+pin2;
                String formattedPin;
            if (pinNew > 10000) {
                formattedPin = "0001";
            } else if (pinNew >= 100) {
                formattedPin = "0" + pinNew;
            } else if (pinNew >= 10) {
                formattedPin = "00" + pinNew;
            } else {
                formattedPin = "000" + pinNew;
            }
                jPasswordField1.setText(formattedPin);
            }else if(jPasswordField1.getText().equals("10000")){
                        jPasswordField1.setText("0001");
            }else{
                jPasswordField1.setText("0001");
            }
            ResultSet rs2 = DBF.search("SELECT `id` FROM acc_details ORDER BY `id` DESC");
            if(rs2.next()){
                String id1 = rs2.getString("id");
                int id2 = Integer.parseInt(id1);
                int id3 = 2;
                int iD = id2+id3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }else{
                int iD = 3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }
            ResultSet rs3 = DBV.search("SELECT `card_no` , `cvv` FROM user WHERE `if` = '"+idNew+"' ");
            rs3.next();
            String cn = rs3.getString("card_no");
            String cv = rs3.getString("cvv");
            jTextField8.setText(cn);
            jTextField9.setText(cv);
        }else if(branch.equals("Colombo6")){
            String branch_code = "06";
            String acc_no = bank_code+branch_code+acc_code;
            ResultSet rs = DBF.search("SELECT `acc_no` FROM acc_details ORDER BY `id` DESC");
            if(rs.next()){
                String accno = rs.getString("acc_no");
                long accno1 = Long.parseLong(accno);
                long accno2 = 1;
                long accNo = accno1+accno2;
                jTextField7.setText(String.valueOf(accNo));
            }else{
                jTextField7.setText(String.valueOf(acc_no)); 
            }
            ResultSet rs1 = DBF.search("SELECT `pin` FROM acc_details ORDER BY `id` DESC");
            if(rs1.next()){
                String pin = rs1.getString("pin");
                int pin1 = Integer.parseInt(pin);
                int pin2 = 1;
                int pinNew = pin1+pin2;
                String formattedPin;
            if (pinNew < 10000) {
                formattedPin = "0001";
            } else if (pinNew >= 100) {
                formattedPin = "0" + pinNew;
            } else if (pinNew >= 10) {
                formattedPin = "00" + pinNew;
            } else {
                formattedPin = "000" + pinNew;
            }
                jPasswordField1.setText(formattedPin);
            }else if(jPasswordField1.getText().equals("10000")){
                        jPasswordField1.setText("0001");
            }else{
                jPasswordField1.setText("0001");
            }
            ResultSet rs2 = DBF.search("SELECT`id` FROM acc_details ORDER BY `id` DESC");
            if(rs2.next()){
                String id1 = rs2.getString("id");
                int id2 = Integer.parseInt(id1);
                int id3 = 2;
                int iD = id2+id3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }else{
                int iD = 3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }
            ResultSet rs3 = DBV.search("SELECT `card_no` , `cvv` FROM user WHERE `if` = '"+idNew+"' ");
            rs3.next();
            String cn = rs3.getString("card_no");
            String cv = rs3.getString("cvv");
            jTextField8.setText(cn);
            jTextField9.setText(cv);
        }else if(branch.equals("Colombo7")){
            String branch_code = "07";
            String acc_no = bank_code+branch_code+acc_code;
            ResultSet rs = DBF.search("SELECT `acc_no` FROM acc_details ORDER BY `id` DESC");
            if(rs.next()){
                String accno = rs.getString("acc_no");
                long accno1 = Long.parseLong(accno);
                long accno2 = 1;
                long accNo = accno1+accno2;
                jTextField7.setText(String.valueOf(accNo));
            }else{
                jTextField7.setText(String.valueOf(acc_no)); 
            }
            ResultSet rs1 = DBF.search("SELECT `pin` FROM acc_details ORDER BY `id` DESC");
            if(rs1.next()){
                String pin = rs1.getString("pin");
                int pin1 = Integer.parseInt(pin);
                int pin2 = 1;
                int pinNew = pin1+pin2;
                String formattedPin;
            if (pinNew < 10000) {
                formattedPin = "0001";
            } else if (pinNew >= 100) {
                formattedPin = "0" + pinNew;
            } else if (pinNew >= 10) {
                formattedPin = "00" + pinNew;
            } else {
                formattedPin = "000" + pinNew;
            }
                jPasswordField1.setText(formattedPin);
            }else if(jPasswordField1.getText().equals("10000")){
                        jPasswordField1.setText("0001");
            }else{
                jPasswordField1.setText("0001");
            }
            ResultSet rs2 = DBF.search("SELECT `id` FROM acc_details ORDER BY `id` DESC");
            if(rs2.next()){
                String id1 = rs2.getString("id");
                int id2 = Integer.parseInt(id1);
                int id3 = 2;
                int iD = id2+id3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }else{
                int iD = 3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }
            ResultSet rs3 = DBV.search("SELECT `card_no` , `cvv` FROM user WHERE `if` = '"+idNew+"' ");
            rs3.next();
            String cn = rs3.getString("card_no");
            String cv = rs3.getString("cvv");
            jTextField8.setText(cn);
            jTextField9.setText(cv);
        }else if(branch.equals("Colombo8")){
            String branch_code = "08";
            String acc_no = bank_code+branch_code+acc_code;
            ResultSet rs = DBF.search("SELECT `acc_no` FROM acc_details ORDER BY `id` DESC");
            if(rs.next()){
                String accno = rs.getString("acc_no");
                long accno1 = Long.parseLong(accno);
                long accno2 = 1;
                long accNo = accno1+accno2;
                jTextField7.setText(String.valueOf(accNo));
            }else{
                jTextField7.setText(String.valueOf(acc_no)); 
            }
            ResultSet rs1 = DBF.search("SELECT `pin` FROM acc_details ORDER BY `id` DESC");
            if(rs1.next()){
                String pin = rs1.getString("pin");
                int pin1 = Integer.parseInt(pin);
                int pin2 = 1;
                int pinNew = pin1+pin2;
                String formattedPin;
            if (pinNew < 10000) {
                formattedPin = "0001";
            } else if (pinNew >= 100) {
                formattedPin = "0" + pinNew;
            } else if (pinNew >= 10) {
                formattedPin = "00" + pinNew;
            } else {
                formattedPin = "000" + pinNew;
            }
                jPasswordField1.setText(formattedPin);
            }else if(jPasswordField1.getText().equals("10000")){
                        jPasswordField1.setText("0001");
            }else{
                jPasswordField1.setText("0001");
            }
            ResultSet rs2 = DBF.search("SELECT `id` FROM acc_details ORDER BY `id` DESC");
            if(rs2.next()){
                String id1 = rs2.getString("id");
                int id2 = Integer.parseInt(id1);
                int id3 = 2;
                int iD = id2+id3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }else{
                int iD = 3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }
            ResultSet rs3 = DBV.search("SELECT `card_no` , `cvv` FROM user WHERE `if` = '"+idNew+"' ");
            rs3.next();
            String cn = rs3.getString("card_no");
            String cv = rs3.getString("cvv");
            jTextField8.setText(cn);
            jTextField9.setText(cv);
        }else{
            String branch_code = "09";
            String acc_no = bank_code+branch_code+acc_code;
            ResultSet rs = DBF.search("SELECT `acc_no` FROM acc_details ORDER BY `id` DESC");
            if(rs.next()){
                String accno = rs.getString("acc_no");
                long accno1 = Long.parseLong(accno);
                long accno2 = 1;
                long accNo = accno1+accno2;
                jTextField7.setText(String.valueOf(accNo));
            }else{
                jTextField7.setText(String.valueOf(acc_no)); 
            }
            ResultSet rs1 = DBF.search("SELECT `pin` FROM acc_details ORDER BY `id` DESC");
            if(rs1.next()){
                String pin = rs1.getString("pin");
                int pin1 = Integer.parseInt(pin);
                int pin2 = 1;
                int pinNew = pin1+pin2;
                String formattedPin;
            if (pinNew < 10000) {
                formattedPin = "0001";
            } else if (pinNew >= 100) {
                formattedPin = "0" + pinNew;
            } else if (pinNew >= 10) {
                formattedPin = "00" + pinNew;
            } else {
                formattedPin = "000" + pinNew;
            }
                jPasswordField1.setText(formattedPin);
            }else if(jPasswordField1.getText().equals("10000")){
                        jPasswordField1.setText("0001");
            }else{
                jPasswordField1.setText("0001");
            }
            ResultSet rs2 = DBF.search("SELECT `id` FROM acc_details ORDER BY `id` DESC");
            if(rs2.next()){
                String id1 = rs2.getString("id");
                int id2 = Integer.parseInt(id1);
                int id3 = 2;
                int iD = id2+id3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }else{
                int iD = 3;
                String iDNew = String.valueOf(iD);
                idNew = iDNew;
            }
            ResultSet rs3 = DBV.search("SELECT `card_no` , `cvv` FROM user WHERE `if` = '"+idNew+"' ");
            rs3.next();
            String cn = rs3.getString("card_no");
            String cv = rs3.getString("cvv");
            jTextField8.setText(cn);
            jTextField9.setText(cv);
        } 
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountCreate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountCreate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountCreate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountCreate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountCreate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
         while(true){
            try {
                Calendar c = Calendar.getInstance();
                int hour = c.get(Calendar.HOUR_OF_DAY);
                if(hour>12){
                    hour = hour - 12;
                }
                int minute = c.get(Calendar.MINUTE);
                int second = c.get(Calendar.SECOND);
                int day = c.get(Calendar.DAY_OF_MONTH);
                int month = c.get(Calendar.MONTH);
                int year = c.get(Calendar.YEAR);
                SimpleDateFormat date = new SimpleDateFormat("YYYY/MM/dd");
                SimpleDateFormat time = new SimpleDateFormat("hh:mm:ss");
                Date d = c.getTime();
                String displaydate = date.format(d);
                String displaytime = time.format(d);
                jLabel3.setText(displaytime);
                jLabel2.setText(displaydate);
                
                
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
}
